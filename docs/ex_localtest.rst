
Getting started: testing Hesiod locally
=======================================

The simplest test setup is to start a local DNS forwarder on your system, and add some local Hesiod data to that forwarder. The local forwarder plays the role of Hesiod server. That allows you to test Hesiod and the Hesutils without requiring a DNS server running on a separate machine.

This will allow walk you through all the steps necessary to configure a client to access basic Hesiod data (user and group).

Let's do this with Dnsmasq. The examples below are for a Debian distribution, but you should be able to adapt them to others.



Check for the Hesiod NSS module
-------------------------------

#. Check that the Glibc's Hesiod NSS module is there::

    $ ls -al /lib/x86_64-linux-gnu/libnss_hesiod.so.2
    lrwxrwxrwx 1 root root 21 Feb  6  2019 /lib/x86_64-linux-gnu/libnss_hesiod.so.2 -> libnss_hesiod-2.24.so

   On Debian and Ubuntu it comes as part of the ``libc6`` package.

   For RHEL / CentOS you will need to set up the PowerTools repo as ``nss_hesiod`` is no longer part of the core distribution. The library will also be installed in a different path than on Debian.

   You won't be able to use Hesiod on that client if the module isn't available (for example if your distro uses the musl C library).



Setup Hesiod
------------

#. Install the ``hesiod`` package, containing ``hesinfo``::

    sudo apt-get install hesiod

#. Configure ``/etc/hesiod.conf``::

    $ cat /etc/hesiod.conf

    lhs=
    rhs=.hesiod
    classes=IN

   In some distributions this file isn't included in the Hesiod package, so just create it.

   With that setup the domain name for our Hesiod DNS requests is ``.hesiod``, wich is the default in the Hesutils configuration file. If you change one remember to change the other too!



Setup the Hesutils
------------------

#. Fetch the Hesutils::

    git clone https://gitlab.com/jflf/hesutils.git

#. Build the manpages (this requires ``rst2man``) and install the Hesutils::

    cd hesutils
    make

    # for an installation in /usr/local:
    sudo make install

    # for an installation somewhere else:
    sudo make PREFIX=<prefix path> install

#. If installed in a different path, add the bin directory to the PATH temporarily::

    export PATH=<prefix path>/bin:<prefix path>/sbin:$PATH

#. And run a very basic smoke test::

    hesgen
    hesgen -h



Setup Dnsmasq
-------------

#. Install Dnsmasq and resolvconf::

    sudo apt-get install dnsmasq resolvconf

#. Check that Dnsmasq is running::

    $ systemctl is-active dnsmasq.service 
    active

   If not, restart it::

    sudo systemctl restart dnsmasq.service

#. If resolvconf worked properly, DNS lookups should be redirected to the loopback address::

    $ cat /etc/resolv.conf
    # Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
    #     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

    nameserver 127.0.0.1

   There might be other entries in the file, such as a searchlist.

   Your original nameservers can be found in ``/var/run/dnsmasq/resolv.conf``. They will be restored to ``/etc/resolv.conf`` when you stop Dnsmasq.

#. Check that Dnsmasq works::

    $ nslookup google.com
    Server:     127.0.0.1
    Address:    127.0.0.1#53

    Non-authoritative answer:
    Name:   google.com
    Address: 142.250.185.78
    Name:   google.com
    Address: 2a00:1450:4001:80e::200e

   We received the answer from ``127.0.0.1``, all good.

#. Add some general configuration to Dnsmasq::

    $ cat /etc/dnsmasq.d/general.conf

    clear-on-reload
    dns-loop-detect

    # listen only on the loopback device
    interface=lo
    bind-interfaces

    # useful for debugging
    log-queries

   And restart it or wait until we have Hesiod data.



Add some Hesiod data
--------------------

#. Download some example ``passwd`` and ``group`` files:

   - `<examples/ex-passwd>`__
   - `<examples/ex-group>`__

   Those contain valid and invalid entries, to give an idea of how ``hesgen`` behaves when reading invalid data.

#. Run ``hesgen`` with all default values, with those downloaded files as input::

    $ hesgen -p ex-passwd -g ex-group

    WARNING: Skipping user "badprigrp": GID 4000 not in range [5000-5999]
    WARNING: Invalid passwd entry: missingfield x 5002 5002  /home/joe
    WARNING: Invalid group entry: gmissingfield x 5901

    # Generated by hesgen on Mon Mar 15 21:49:27 CET 2021

    local=/ns.athena.mit.edu/
    local=/hesiod/

    # Users
    txt-record=joe.passwd.hesiod,"joe:*:5000:5000::/home/joe:/bin/bash"
    txt-record=5000.uid.hesiod,"joe:*:5000:5000::/home/joe:/bin/bash"
    txt-record=missingshell.passwd.hesiod,"missingshell:*:5003:5003::/home/joe:"
    txt-record=5003.uid.hesiod,"missingshell:*:5003:5003::/home/joe:"

    # Groups
    txt-record=joe.group.hesiod,"joe:x:5000:"
    txt-record=5000.gid.hesiod,"joe:x:5000:"
    txt-record=secondary.group.hesiod,"secondary:x:5900:"
    txt-record=5900.gid.hesiod,"secondary:x:5900:"
    txt-record=malformed.group.hesiod,"malformed:x:5902:"
    txt-record=5902.gid.hesiod,"malformed:x:5902:"

    # Group lists
    txt-record=joe.grplist.hesiod,"secondary"

   The three WARNING lines are actually displayed on stderr, the real output starts at ``# Generated by hesgen``.

#. Copy that data to your Dnsmasq daemon. The easiest way is::

    hesgen -p ex-passwd -g ex-group | sudo tee /etc/dnsmasq.d/hesiod.conf

#. Restart Dnsmasq::

    sudo systemctl restart dnsmasq.service

#. Check the Dnsmasq logs::

    $ sudo journalctl -b -u dnsmasq.service | grep -i hesiod
    XXX XXX dnsmasq[XXX]: using local addresses only for domain hesiod

   We want to see that any request for the domain ``.hesiod`` is local and won't be forwarded.

#. Check that you can fetch the DNS records::

    $ nslookup -q=txt joe.passwd.hesiod
    Server:     127.0.0.1
    Address:    127.0.0.1#53

    Non-authoritative answer:
    joe.passwd.hesiod   text = "joe:*:5000:5000:,,,:/home/joe:/bin/bash"

    Authoritative answers can be found from:

   You can also use dig: ``dig joe.passwd.hesiod TXT``

#. Check that ``hesinfo`` is also working::

    $ hesinfo joe passwd
    joe:*:5000:5000:,,,:/home/joe:/bin/bash



Set up the nsswitch
-------------------

#. Add ``hesiod`` at the end of the lines for ``passwd`` and ``group`` in ``/etc/nsswitch.conf``::

    $ grep hesiod /etc/nsswitch.conf 
    passwd:         compat hesiod
    group:          compat hesiod

#. Check that you can get ``joe``'s identity through system tools::

    $ id joe
    uid=5000(joe) gid=5000(joe) groups=5000(joe),5900(secondary)

    $ id missingshell
    uid=5003(missingshell) gid=5003 groups=5003

   ``missingshell`` is missing the group name as it's not defined in the test group file, and ``hesgen`` doesn't check for that kind of thing.

#. Check the Dnsmasq logs for the requests::

    $ sudo journalctl -b -u dnsmasq.service | grep -i hesiod

    XXX XXX dnsmasq[XXX]: query[TXT] joe.passwd.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config joe.passwd.hesiod is <TXT>
    XXX XXX dnsmasq[XXX]: query[TXT] 5000.uid.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config 5000.uid.hesiod is <TXT>
    XXX XXX dnsmasq[XXX]: query[TXT] 5000.uid.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config 5000.uid.hesiod is <TXT>
    XXX XXX dnsmasq[XXX]: query[TXT] 5000.gid.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config 5000.gid.hesiod is <TXT>
    XXX XXX dnsmasq[XXX]: query[TXT] joe.grplist.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config joe.grplist.hesiod is <TXT>
    XXX XXX dnsmasq[XXX]: query[TXT] secondary.group.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config secondary.group.hesiod is <TXT>
    XXX XXX dnsmasq[XXX]: query[TXT] 5000.gid.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config 5000.gid.hesiod is <TXT>
    XXX XXX dnsmasq[XXX]: query[TXT] 5900.gid.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config 5900.gid.hesiod is <TXT>
    XXX XXX dnsmasq[XXX]: query[TXT] missingshell.passwd.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config missingshell.passwd.hesiod is <TXT>
    XXX XXX dnsmasq[XXX]: query[TXT] 5003.uid.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config 5003.uid.hesiod is <TXT>
    XXX XXX dnsmasq[XXX]: query[TXT] 5003.uid.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config 5003.uid.hesiod is <TXT>
    XXX XXX dnsmasq[XXX]: query[TXT] 5003.gid.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config 5003.gid.hesiod is NXDOMAIN
    XXX XXX dnsmasq[XXX]: query[TXT] missingshell.grplist.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config missingshell.grplist.hesiod is NXDOMAIN
    XXX XXX dnsmasq[XXX]: query[TXT] 5003.gid.hesiod from 127.0.0.1
    XXX XXX dnsmasq[XXX]: config 5003.gid.hesiod is NXDOMAIN




What next?
----------

So now you have a working client setup, and a server running on the same machine. But if you try to login using one of the Hesiod accounts, it won't work.

You have to remember that Hesiod only provides *identification*. It doesn't serve *authentication* information (things like password). For that you need to set up a Kerberos realm. For more information on the security topics (but not how to set up Kerberos, you'll have to look somewhere else), see `Passwords and security concerns with Hesiod <hes_sec.rst>`__.

On the server side, you can set up a separate Hesiod server on a different machine and see how it works. See the `Hesutils documentation <index.rst>`__ for some light information about a few DNS servers. You will find a lot more on the Internet.

On the client side, after moving your Hesiod records to a separate server you can complete your setup by enabling `Client-side record caching <client_caching.rst>`__.

