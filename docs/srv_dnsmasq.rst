
Dnsmasq server configuration
============================

Overview
--------

`Dnsmasq <https://thekelleys.org.uk/dnsmasq/doc.html>`__ is a small DNS server, DNSSEC-validating and caching recursive resolver, DHCP server, TFTP server, and all-around small-network wondertool. It is available pretty much on all Linux distributions, \*BSD, OS X and the majority of embedded routers, switches, etc. You probably have multiple copies of it running all around your home or office already, in modems and routers. It is simple yet powerful, and is one of the easiest ways to set up a Hesiod server.

It can be used in two different ways:

- as a Hesiod server, providing local answers to Hesiod queries and forwarding the rest to upstream servers;

- as a DNSSEC-validating recursive resolver on the client system, if your Hesiod zone is signed.

In this document we'll take a look at the first way, the server configuration.



Records and zones
-----------------

Dnsmasq-formatted output is ``hesgen``'s default. It can also be selected with ``OUTPUTFMT="dnsmasq"``.


Dnsmasq has an implicit, optionally authoritative local "zone", and the Hesiod records live in it. It's not actually a zone in the BIND meaning of the word, but rather the collection of locally-defined records.

It is possible to create a full zone with SOA record with Dnsmasq, but it is a lot simpler to use the implicit zone. ``Hesgen``-generated records are for the implicit zone, and the parameters ``CREATEZONE=`` and ``SOA=`` have no effect with Dnsmasq.


The syntax of TXT records is::

    txt-record=<FQDN>,"<RR contents>"



Server configuration
--------------------

Dnsmasq doesn't require any specific configuration to act as a Hesiod server:

- redirect the output of ``hesgen`` to a file;
- check the contents of the file;
- copy the file to ``/etc/dnsmasq.d/`` (or any other Dnsmasq config path on your system);
- restart Dnsmasq.
  
In the majority of cases this will be enough to serve Hesiod records.


Note that embedded systems might have completely different ways of dealing with configuration files. This is the case in particular on OpenWRT, see their documentation `here <https://openwrt.org/docs/guide-user/base-system/dhcp.dnsmasq>`__ and `here <https://openwrt.org/docs/guide-user/base-system/dhcp_configuration>`__ for examples.


For debugging issues, you will need this option in your Dnsmasq configuration::

    log-queries



Blocking
--------

Dnsmasq is primarily a recursive resolver. If a request cannot be answered from local sources, including the implicit zone, the request is forwarded to the next resolver.

The syntax to prevent forwarding unanswerable requests for a specific domain is::

    local=/<domain>/


By default, ``hesgen`` will write out the two following lines::

    local=/ns.athena.mit.edu/
    local=/<LHS>.<RHS>/

with ``<LHS>.<RHS>`` replaced by the values from the configuration file.

The first line will prevent forwarding any request to the MIT's Athena nameserver. The second line will prevent forwarding any request from the Hesiod domain that can't be answered locally.

This can be disabled with the parameters ``BLOCKATHENA=0`` resp. ``BLOCKUPSTREAM=0``. In 99.9% of cases you will want to keep those two enabled, and block forwarding for those domains.



Examples
--------

The default output for simple ``passwd`` and ``group`` files might look like this::

    # Generated by hesgen on Mon Mar  8 21:50:08 CET 2021
    
    local=/ns.athena.mit.edu/
    local=/hesiod/
    
    # Users
    txt-record=jake.passwd.hesiod,"jake:*:5000:5000::/home/jake:/bin/bash"
    txt-record=5000.uid.hesiod,"jake:*:5000:5000::/home/jake:/bin/bash"
    txt-record=elwood.passwd.hesiod,"elwood:*:5001:5001::/home/elwood:/bin/bash"
    txt-record=5001.uid.hesiod,"elwood:*:5001:5001::/home/elwood:/bin/bash"
    txt-record=cleophus.passwd.hesiod,"cleophus:*:5002:5200::/home/cleophus:/bin/bash"
    txt-record=5002.uid.hesiod,"cleophus:*:5002:5200::/home/cleophus:/bin/bash"
    
    # Groups
    txt-record=jake.group.hesiod,"jake:x:5000:"
    txt-record=5000.gid.hesiod,"jake:x:5000:"
    txt-record=elwood.group.hesiod,"elwood:x:5001:"
    txt-record=5001.gid.hesiod,"elwood:x:5001:"
    txt-record=orphanage.group.hesiod,"orphanage:x:5100:"
    txt-record=5100.gid.hesiod,"orphanage:x:5100:"
    txt-record=triplerock.group.hesiod,"triplerock:x:5200:"
    txt-record=5200.gid.hesiod,"triplerock:x:5200:"
    
    # Group lists
    txt-record=jake.grplist.hesiod,"5000:5100"
    txt-record=elwood.grplist.hesiod,"5001:5100"
    txt-record=cleophus.grplist.hesiod,"5200"



Notes
-----

Dnsmasq doesn't support the ``HS`` class, only ``IN``. The parameter ``CLASS=`` has no effect.

Dnsmasq doesn't support per-TXT-record TTL. The only option is to specify a TTL for all locally-answered queries. This is what ``hesgen`` does when ``TTL=`` is defined.

Dnsmasq doesn't cache TXT records, so if used as a validating resolver on the client it will *always* forward the request to the forwarder, regardless of the TTL it got from the last query.

As of version 2.76, Dnsmasq automatically splits long RR.

