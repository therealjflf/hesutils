
Bind 9 server configuration
===========================

Overview
--------

`Bind 9 <https://www.isc.org/bind/>`__ is a full-featured DNS server and resolver. It has been around for decades and supports everything you may want, and is pretty much the reference when it comes to DNS servers.

If you're already involved in DNS management, you will almost certainly be familiar with BIND. If you're not, I would suggest that you take a look at the alternatives (`dnsmasq <srv_dnsmasq.rst>`__ or `unbound <srv_unbound.rst>`__, as BIND requires more effort to get going (and the error messages can be impossible to decipher).


As any kitchen sink, it can probably be used in more ways than I'm aware of. We'll focus on the Hesiod server role.




Records and zones
-----------------

Bind-formatted output is selected with ``OUTPUTFMT="bind"``.

Bind supports `RFC 1035 <https://tools.ietf.org/html/rfc1035>`__-formatted zones. ``Hesgen`` writes out the *contents* of a zone (the zone file), but not the zone definition in ``/etc/bind/named.conf.*``.

While ``hesgen`` can add a class to each and every record in a zone, this is better done for the entire zone. Moreover BIND enforces zone separation, which complicates things. See `HS class`_ for details.




Server configuration
--------------------

BIND requires quite a bit of configuration to get going -- much more so than the alternatives. I won't try to provide exhaustive configuration examples here, but only the absolute minimum to get BIND to answer our requests.


For debugging issues, you will need this option in the ``options`` section of your ``named.conf.options``::

    querylog yes;


Zone declaration
~~~~~~~~~~~~~~~~

The absolute minimal zone declaration for the Hesiod class is::

    zone "hesiod" {
        type        master;
        file        "/etc/bind/db.hesiod";
    };

The zone contents (the output of ``hesgen``) go into ``/etc/bind/db.hesiod``.


HS class
~~~~~~~~

Because BIND enforces class separation, IN and HS records (the two only options for Hesiod data) need to be defined in separate files and the zones wrapped in separate views. You can think of views as separate BIND servers, if that helps.

A simple setup in ``named.conf.local``, might look like this::

    view "default" IN {
        include         "/etc/bind/zones.rfc1918";
        include         "/etc/bind/named.conf.default-zones";
    };

    view "hesiod" HS {
        zone "hesiod" {
            type        master;
            file        "/etc/bind/db.hesiod";
        };
    };

In this example the classes are defined directly at the view level. All zones within those views inhering the class, and there is no need to use ``hesgen``'s ``CLASS=`` parameter.

When views are used, zones can only be defined inside a view (again, think of views as separate servers). So we needed to include the RFC 1918 and default zone files in the default IN zone, as well as any other include that you might have added to your configuration.




Blocking
--------

Domain blocking with BIND isn't done inside the zone files. Because of this the parameters ``BLOCKATHENA=`` and ``BLOCKUPSTREAM=`` have no effect in BIND-formatted output.


Upstream
~~~~~~~~

Upstream blocking (returning ``NXDOMAIN`` when a record isn't found locally instead of forwarding it) is done by making sure that there are no forwarders for the Hesiod zone. This looks like this::

    zone "hesiod" {
        type        master;
        file        "/etc/bind/db.hesiod";
        forwarders  { };
    };

This will override the default forwarders defined in the ``options`` section, typically in ``/etc/bind/named.conf.options``.


MIT's Athena
~~~~~~~~~~~~

Blocking MIT's Athena NS is a bit more involved. There are multiple ways to achieve this, but the best option is probably to use `DNS Response Policy Zones <https://dnsrpz.info/>`__. This is a multipart process.

In your ``options``, add a response policy zone::

    response-policy     { zone "rpz.local"; };

Then in your ``named.conf.local``, define that zone::

    zone "rpz.local" {
        type        master;
        file        "/etc/bind/db.rpz.local";
    };

And finally add the contents of the zone contents to ``/etc/bind/db.rpz.local``::

    $TTL    86400
    @   SOA localhost. root.localhost. (
                      1     ; Serial
                 604800     ; Refresh
                  86400     ; Retry
                2419200     ; Expire
                  86400 )   ; Negative Cache TTL
    ;
    @                    NS      localhost.
    
    ns.athena.mit.edu    CNAME   .
    *.ns.athena.mit.edu  CNAME   .



Examples
--------

The default output for simple ``passwd`` and ``group`` files might look like this::

    ; Generated by hesgen on Tue Mar  9 07:17:55 CET 2021
    
    $ORIGIN  hesiod.
    
    ; SOA
    @                 SOA    ns.hesiod. admin.example.com. ( 1 7200 3600 1209600 3600 )
    
    ; NS
    @                 NS     ns.hesiod.
    
    ; Users
    jake.passwd       TXT    "jake:*:5000:5000::/home/jake:/bin/bash"
    5000.uid          CNAME  jake.passwd
    elwood.passwd     TXT    "elwood:*:5001:5001::/home/elwood:/bin/bash"
    5001.uid          CNAME  elwood.passwd
    cleophus.passwd   TXT    "cleophus:*:5002:5200::/home/cleophus:/bin/bash"
    5002.uid          CNAME  cleophus.passwd
    
    ; Groups
    jake.group        TXT    "jake:x:5000:"
    5000.gid          CNAME  jake.group
    elwood.group      TXT    "elwood:x:5001:"
    5001.gid          CNAME  elwood.group
    orphanage.group   TXT    "orphanage:x:5100:"
    5100.gid          CNAME  orphanage.group
    triplerock.group  TXT    "triplerock:x:5200:"
    5200.gid          CNAME  triplerock.group
    
    ; Group lists
    jake.grplist      TXT    "5000:5100"
    elwood.grplist    TXT    "5001:5100"
    cleophus.grplist  TXT    "5200"




Notes
-----

RFC 1035 defines a standard zone format that is supported by multiple other authoritative DNS servers. Thus the output of ``hesgen`` in Bind 9 format could possibly work with those, although it hasn't been tested.

As of version 9.11.5.P4, BIND doesn't automatically split long TXT records. When loading a configuration with records leading to answers larger than 512 bytes, it will start but ignore the offending zone, and print this message in the log: ``syntax error``.

