#!/bin/bash

# ==============================================================================
#
# Functions to write out the Hesiod TXT records in different formats.
#
# ==============================================================================
#
# This file is part of Hesutils <https://gitlab.com/jflf/hesutils>
# Hesutils Copyright (c) 2019-2020 JFLF
#
# Hesutils is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hesutils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hesutils. If not, see <https://www.gnu.org/licenses/>.
#
# ==============================================================================



# Text utilities
# ------------------------------------------------------------------------------

# Make sure any double quote within a string is properly escaped.

function sanitize_TXT { sed 's/"/\\\\"/g' ; }



# Generate the Hesiod records
# ------------------------------------------------------------------------------

function hes_output {

    echo -e "${COMMENT} Generated by hesutils on $(date)\n"

    # block what needs to be blocked
    case $OUTPUTFMT in
        dnsmasq )
            (( BLOCKUPSTREAM )) && echo "local=/${HESDOMAIN}/"
            (( BLOCKATHENA )) && echo "local=/ns.athena.mit.edu/"
            ;;
    esac

    echo


    # Notes:
    # - numerical indices (eg. ${!uid2user[@]}) are sorted automatically
    # - dnsmasq doesn't support CNAME, we need to repeat the TXT records twice:
    #   .user and .UID, and .group and .GID...


    # user and UID records first
    for uid in ${!uid2user[@]} ; do
        user=${uid2user[$uid]}
        while read line ; do

            case $OUTPUTFMT in
                dnsmasq )
                    printf 'txt-record=%s.%s,"%s"\n' ${user}.passwd $HESDOMAIN "$line"
                    printf 'txt-record=%s.%s,"%s"\n' ${uid}.uid $HESDOMAIN "$line"
                    ;;
                unbound )
                    # not sure yet how to do a CNAME with unbound
                    printf "local-data: '%s.%s TXT \"%s\"'\n" ${user}.passwd $HESDOMAIN "$line"
                    printf "local-data: '%s.%s TXT \"%s\"'\n" ${uid}.uid $HESDOMAIN "$line"
                    ;;
                bind )
                    printf '%-19s IN  TXT    "%s"\n' ${user}.passwd "$line"
                    printf '%-19s IN  CNAME  %s\n' ${uid}.uid ${user}.passwd
                    ;;
            esac

        done < <(echo ${hesusers[$user]} | sanitize_TXT)
    done

    echo


    # then group and GID records
    for gid in ${!gid2group[@]} ; do
        group=${gid2group[$gid]}
        while read line ; do

            case $OUTPUTFMT in
                dnsmasq )
                    printf 'txt-record=%s.%s,"%s"\n' ${group}.group $HESDOMAIN "$line"
                    printf 'txt-record=%s.%s,"%s"\n' ${gid}.gid $HESDOMAIN "$line"
                    ;;
                unbound )
                    # not sure yet how to do a CNAME with unbound
                    printf "local-data: '%s.%s TXT \"%s\"'\n" ${group}.group $HESDOMAIN "$line"
                    printf "local-data: '%s.%s TXT \"%s\"'\n" ${gid}.gid $HESDOMAIN "$line"
                    ;;
                bind )
                    printf '%-19s IN  TXT    "%s"\n' ${group}.group "$line"
                    printf '%-19s IN  CNAME  %s\n' ${gid}.gid ${group}.group
                    ;;
            esac

        done < <(echo ${hesgroups[$group]} | sanitize_TXT)
    done

    echo


    # then grplist records
    for uid in ${!uid2user[@]} ; do
        user=${uid2user[$uid]}
        while read line ; do

            case $OUTPUTFMT in
                dnsmasq )
                    printf 'txt-record=%s.%s,"%s"\n' ${user}.grplist $HESDOMAIN "$line"
                    ;;
                unbound )
                    printf "local-data: '%s.%s TXT \"%s\"'\n" ${user}.grplist $HESDOMAIN "$line"
                    ;;
                bind )
                    printf '%-19s IN  TXT    "%s"\n' ${user}.grplist "$line"
                    ;;
            esac

        done < <(echo ${grplists[$user]} | sanitize_TXT)
    done

    echo


    # and finally filsys records
    if (( FILSYS )) ; then
        for uid in ${!uid2user[@]} ; do
            user=${uid2user[$uid]}
            while read line ; do
                # skip empty lines due to trailing carriage returns
                (( ${#line} )) || continue

                case $OUTPUTFMT in
                    dnsmasq )
                        printf 'txt-record=%s.%s,"%s"\n' ${user}.filsys $HESDOMAIN "$line"
                        ;;
                    unbound )
                        printf "local-data: '%s.%s TXT \"%s\"'\n" ${user}.filsys $HESDOMAIN "$line"
                        ;;
                    bind )
                        printf '%-19s IN  TXT    "%s"\n' ${user}.filsys "$line"
                        ;;
                esac

            done < <(echo -e ${filsys[$user]} | sanitize_TXT)

        done
    fi
}

