#!/bin/bash

# ==============================================================================
#
# hesgenerate
#
# ------------------------------------------------------------------------------
#
# Read the information contained in /etc/passwd and /etc/groups, and generate
# DNS configuration files containing Hesiod entries for selected users and
# groups.
# 
# ==============================================================================



# Boilerplate stuff
# ------------------------------------------------------------------------------

# Safety first
set -e -o pipefail

# We deal with "*" and we don't want any expansion
set -o noglob


# The mandatory help message
# ------------------------------------------------------------------------------

function print_help {

    echo "
Usage:  $(basename "$0") [options]

Options:

  -h                display this help message and exit
  -v                run in verbose mode
  -c <filename>     use an alternative configuration file
  -p <filename>     use an alternative passwd file
  -g <filename>     use an alternative group file
" >&2
}




# Internal variables
# ------------------------------------------------------------------------------

# The list of library files that we'll load later
libfiles=( lib_check_cfg_file
           lib_filsys
           lib_passwd_group
           lib_output )


# As we can't query /etc/passwd and /etc/group like a database, we'll need a
# bunch of tables to help the lookups that we'll do later.

declare -a uid2user         # index: UID        ->  user name
declare -A hesusers         # index: user name  ->  /etc/passwd string
declare -A primarygid       # index: user name  ->  primary GID
declare -A grplists         # index: user name  ->  GIDs the user belongs to
declare -a gid2group        # index: GID        ->  group name
declare -a groupmembers     # index: GID        ->  user members of that group
declare -A hesgroups        # index: group name ->  /etc/group string
declare -A filsys           # index: user name  ->  filsys record(s)

declare -i verbose=0



# Time to parse the parameters
# ------------------------------------------------------------------------------

OPTIND=1
optstring=":hvc:p:g:"

while getopts $optstring name ; do
    case $name in
        h)  print_help
            exit 0
            ;;
        v)  verbose=1
            ;;
        c)  HESCFGFILE="$OPTARG"
            ;;
        p)  HESPASSWDFILE="$OPTARG"
            ;;
        g)  HESGROUPFILE="$OPTARG"
            ;;
        :)  echo "ERROR: The option \"-$OPTARG\" requires a parameter." >&2
            print_help
            exit 1
            ;;
        *)  echo "ERROR: Unknown option: -$OPTARG" >&2
            print_help
            exit 1
    esac
done

# Drop all processed options and leave only the non-option parameters.
# We don't actually need this right now, but we may some day!
shift "$(( OPTIND - 1 ))"




# Check whether the various hesutils directories and files exist
# ------------------------------------------------------------------------------

# We need to know where we are first
# The PATH hack is needed to work correctly with "bash -x script"
fullpath="$(dirname "$(readlink -f "$(PATH=${PATH}:. which "$0")")")"

HESPREFIX="${HESPREFIX:-${fullpath}}"


# Now that the prefix is known, load the library files
for i in ${libfiles[@]} ; do
    source "${HESPREFIX}/${i}"
done


# Those can be defined via the command line too, which has priority
HESCFGFILE="${HESCFGFILE:-/etc/hesutils.conf}"
HESPASSWDFILE="${HESPASSWDFILE:-/etc/passwd}"
HESGROUPFILE="${HESGROUPFILE:-/etc/group}"

for file in HES{CFG,PASSWD,GROUP}FILE ; do
    if ! [ -r "${!file}" ] ; then
        echo "ERROR: The file doesn't exist or is not readable: ${file}=${!file}" >&2
        exit 1
    fi
done


# Time to display some info
if (( verbose )) ; then
    echo "
Configuration file: $HESCFGFILE
Passwd file:        $HESPASSWDFILE
Group file:         $HESGROUPFILE
"
fi



# Load and check the configuration file
# ------------------------------------------------------------------------------

(( verbose )) && echo "Loading the configuration file"
source "$HESCFGFILE"

(( verbose )) && echo "Checking the configuration file"
check_cfg_file      # exits in case of errors, checks and assigns default values



# Parse the various files to fill in the data arrays
# ------------------------------------------------------------------------------

parse_passwd
parse_group



# Generate the configuration files
# ------------------------------------------------------------------------------

hes_output

# And we're done!

