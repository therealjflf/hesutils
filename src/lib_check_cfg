#!/usr/bin/env bash

# ==============================================================================
#
# Functions to validate the contents of a Hesutils configuration file.
#
# ==============================================================================
#
# This file is part of Hesutils <https://gitlab.com/jflf/hesutils>
# Hesutils Copyright (c) 2019-2021 JFLF
#
# Hesutils is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hesutils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hesutils. If not, see <https://www.gnu.org/licenses/>.
#
# ==============================================================================



# Helper functions
# ------------------------------------------------------------------------------

# Sanitize the contents of binary parameters
# $1    default value
# $2+   parameter names

function sanitize_binary_params {

    local i
    local failed=0
    local def=$1
    shift

    for i in "${@}" ; do
        case "x${!i,,}" in
            x0|xn|xno|xfalse)   eval ${i}=0 ;;
            x1|xy|xyes|xtrue)   eval ${i}=1 ;;
            x)                  eval ${i}=$def ;;
            *)      echo "ERROR: Invalid value for binary parameter ${i}: ${!i}" >&2
                    failed=1 ;;
        esac
    done

    return $failed
}


# Check if variables are really integers
# $1+   variable names

function check_integers {

    local i
    local failed=0

    for i in "${@}" ; do
        if ! [[ ${!i} =~ ^[0-9]+$ ]] ; then
            echo "ERROR: Invalid value for integer parameter $i: ${!i}" >&2
            failed=1
        fi
    done

    return $failed
}


# Check if the directory of a file path contained in a variable, is indeed a
# directory.
# $1    variable name

function check_directory {

    local dirname
    local failed=0

    dirname="$(dirname "${!1}")"
    if ! [[ -d "$dirname" ]] ; then
        echo "ERROR: Directory doesn't exist: ${1}=${!1}" >&2
        failed=1
    fi

    return $failed
}



# Check all the variables and assign default values
# ------------------------------------------------------------------------------

function check_cfg_file {

    failed=0

    # Set some default values if empty

    [[ "$RHS" ]] || RHS=".hesiod"   # LHS can be empty, RHS cannot
    [[ "$UIDMIN" ]] || UIDMIN=5000
    [[ "$UIDMAX" ]] || UIDMAX=5999
    [[ "$GIDMIN" ]] || GIDMIN=$UIDMIN
    [[ "$GIDMAX" ]] || GIDMAX=$UIDMAX
    [[ "$FSTYPE" ]] || FSTYPE="NFS"
    [[ "$NFSSERVER" ]] || NFSSERVER=$(hostname -f)
    [[ "$FSMOUNTOPTS" ]] || FSMOUNTOPTS="rw"
    [[ "$OUTPUTFMT" ]] || OUTPUTFMT="dnsmasq"


    # Check the binary options that default to 0
    sanitize_binary_params 0 FULLMEMBERLIST FILSYS FILSYSAUTO || failed=1

    # Check the binary options that default to 1
    sanitize_binary_params 1 TRIMGECOS USERGRPLIST CREATEZONE BLOCKUPSTREAM BLOCKATHENA || failed=1


    # The standard calls for LHS and RHS starting with leading dots. Those just get
    # in the way, so strip them.
    LHS="${LHS#.}"
    RHS="${RHS#.}"

    # With the LHS and RHS we can build the full domain
    HESDOMAIN="${LHS:+${LHS}.}${RHS}"


    # Make sure that the UID and GID values are really integers
    check_integers {UID,GID}{MIN,MAX} || failed=1

    # Check the UID and GID values
    if (( UIDMIN > UIDMAX || GIDMIN > GIDMAX )) ; then
        echo "ERROR: UIDMAX / GIDMAX cannot be inferior to UIDMIN / GIDMIN." >&2
        failed=1
    fi

    if (( UIDMIN < 1000 )) ; then
        echo "WARNING: System users cannot be exported, setting UIDMIN to 1000 (was $UIDMIN)." >&2
        UIDMIN=1000
    fi

    if (( GIDMIN < 1000 )) ; then
        echo "WARNING: System groups cannot be exported, setting GIDMIN to 1000 (was $GIDMIN)." >&2
        GIDMIN=1000
    fi


    # Some of the FILSYS variables can't be checked, so nothing to do there:
    # HOMESEDEXPORT, HOMESEDMOUNT, NFSSERVER

    if [[ "$FSTYPE" && "$FSTYPE" != "NFS" && "$FSTYPE" != "AFS" && ! "$FSDEVICE" ]] ; then
        echo "ERROR: The parameter FSDEVICE is mandatory when FSTYPE is neither NFS nor AFS." >&2
        failed=1
    fi

    if [[ "$FSMAPFILE" && ! -r "$FSMAPFILE" ]] ; then
        echo "ERROR: The FSMAPFILE doesn't exist or is not readable: $FSMAPFILE" >&2
        failed=1
    fi

    if [[ "$FSCOMMAND" ]] && ! type "$FSCOMMAND" &> /dev/null ; then
        echo "ERROR: The FSCOMMAND doesn't exist, is not executable or is not in the PATH: $FSCOMMAND" >&2
        failed=1
    fi


    # Validate the DNS options

    case "$OUTPUTFMT" in
        dnsmasq | unbound ) COMMENT='#' ;;
        bind )              COMMENT=';' ;;
        * )
            echo "ERROR: The OUTPUTFMT is not a supported type: $OUTPUTFMT" >&2
            failed=1
            ;;
    esac

    [[ "$TTL" ]] && check_integers TTL

    case "x${CLASS}" in
        xIN | xHS | x ) ;;
        *)  echo "ERROR: Invalid record class: $CLASS" >&2
            failed=1
            ;;
    esac

    if [[ "${SOA}" ]] ; then
        if [[ ! "$(declare -p SOA 2>/dev/null)" =~ ^declare\ -a ]] ; then
            echo "ERROR: The parameter SOA isn't an array." >&2
            failed=1
        elif (( ${#SOA[@]} != 7 )) ; then
            echo "ERROR: Expected 7 SOA fields, found ${#SOA[@]}." >&2
            failed=1
        fi
    fi


    # Server-specific cases

    case "$OUTPUTFMT" in
        dnsmasq )
            # parameters that don't apply to dnsmasq
            CREATEZONE=0
            CLASS=
            SOA=
            ;;

        unbound )
            (( CREATEZONE )) && CLASS=
            ;;

        bind )
            if (( CREATEZONE )) && [[ ! "$SOA" ]] ; then
                echo "ERROR: The parameter SOA is mandatory when OUTPUTFMT=bind and CREATEZONE=1." >&2
                failed=1
            fi
            ;;
    esac

    return $failed
}

