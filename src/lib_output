#!/usr/bin/env bash

# ==============================================================================
#
# Functions to write out the Hesiod TXT records in different formats.
#
# ==============================================================================
#
# This file is part of Hesutils <https://gitlab.com/jflf/hesutils>
# Hesutils Copyright (c) 2019-2021 JFLF
#
# Hesutils is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hesutils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hesutils. If not, see <https://www.gnu.org/licenses/>.
#
# ==============================================================================



# Text utilities
# ------------------------------------------------------------------------------

# Make sure any double quote within a string is properly escaped.
# It needs to be double-escaped as one of the backslashes will be lost later.

function sanitize_generic { sed -e 's/"/\\\\"/g' ; }

# Unbound needs the single quotes removed too, as you can't escape a single
# quote within a single quote string.

function sanitize_unbound { sed -e 's/"/\\\\"/g' -e "s/'/./g" ; }



# Generate the Hesiod records
# ------------------------------------------------------------------------------

function hes_output {

    # Offset to pretty-print the zone data
    offset=''

    # Do we need a trailing dot?
    dot=''

    # Which way do we sanitize the strings?
    sanitize=sanitize_generic



    (( dateout )) && echo -e "${COMMENT} Generated by hesgen on $(date)\n"


    # Header, zone definitions and blocking

    case $OUTPUTFMT in
        dnsmasq )
            (( BLOCKATHENA )) && echo "local=/ns.athena.mit.edu/"
            (( BLOCKUPSTREAM )) && echo "local=/${HESDOMAIN}/"
            echo
            ;;

        unbound )
            sanitize=sanitize_unbound

            if (( CREATEZONE )) ; then
                echo "server:"
                offset='    '
            fi

            (( BLOCKATHENA )) && echo -e "${offset}local-zone: \"ns.athena.mit.edu.\" always_nxdomain\n"

            if (( CREATEZONE )) ; then
                if (( BLOCKUPSTREAM )) ; then
                    dot='.'
                    echo -e "${offset}local-zone: \"${HESDOMAIN}.\" static\n"
                else
                    echo -e "${offset}local-zone: \"${HESDOMAIN}\" transparent\n"
                fi
                offset='        '
            fi
            ;;
    esac


    # We're going to redirect stdout to column for pretty-printing
    # First save current stdout to descriptor 9
    exec 9>&1

    # Then redirect stdout
    # Column aligns the fields, and sed indents non-empty lines by the offset
    exec 1> >( column -tes $'\t' | sed "s/^./${offset}&/g" )


    #\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
    #
    #   EVERYTHING BELOW THIS LINE IS PRINTED OUT THROUGH COLUMN AND THEN SED!
    #
    #   Column's separator is tab. Use '\t' in your printf and echo -e.
    #   Do not mix output through column with direct writes to descriptor 9 or
    #   the line order will be lost.
    #
    #\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\


    # Notes:
    # - numerical indices (eg. ${!uid2user[@]}) are sorted automatically
    # - dnsmasq doesn't support CNAMEs and unbound doesn't expand them, so we
    #   need to repeat the TXT records twice: .user + .UID, .group + .GID...


    # user and UID records first
    echo "${COMMENT} Users"

    for uid in ${!uid2user[@]} ; do
        user=${uid2user[$uid]}
        while read line ; do

            case $OUTPUTFMT in
                dnsmasq )
                    printf 'txt-record=%s.%s,"%s"\n' ${user}.passwd $HESDOMAIN "$line"
                    printf 'txt-record=%s.%s,"%s"\n' ${uid}.uid $HESDOMAIN "$line"
                    ;;
                unbound )
                    printf $'local-data:\t\'%s.%s\tTXT\t"%s"\'\n' ${user}.passwd ${HESDOMAIN}${dot} "$line"
                    printf $'local-data:\t\'%s.%s\tTXT\t"%s"\'\n' ${uid}.uid ${HESDOMAIN}${dot} "$line"
                    ;;
                bind )
                    printf $'%s\tIN\tTXT\t"%s"\n' ${user}.passwd "$line"
                    printf $'%s\tIN\tCNAME\t%s\n' ${uid}.uid ${user}.passwd
                    ;;
            esac

        done < <(echo ${hesusers[$user]} | $sanitize)
    done

    echo


    # then group and GID records
    echo "${COMMENT} Groups"

    for gid in ${!gid2group[@]} ; do
        group=${gid2group[$gid]}
        while read line ; do

            case $OUTPUTFMT in
                dnsmasq )
                    printf 'txt-record=%s.%s,"%s"\n' ${group}.group $HESDOMAIN "$line"
                    printf 'txt-record=%s.%s,"%s"\n' ${gid}.gid $HESDOMAIN "$line"
                    ;;
                unbound )
                    printf $'local-data:\t\'%s.%s\tTXT\t"%s"\'\n' ${group}.group ${HESDOMAIN}${dot} "$line"
                    printf $'local-data:\t\'%s.%s\tTXT\t"%s"\'\n' ${gid}.gid ${HESDOMAIN}${dot} "$line"
                    ;;
                bind )
                    printf $'%s\tTXT\t"%s"\n' ${group}.group "$line"
                    printf $'%s\tCNAME\t%s\n' ${gid}.gid ${group}.group
                    ;;
            esac

        done < <(echo ${hesgroups[$group]} | $sanitize)
    done

    echo


    # then grplist records
    echo "${COMMENT} Group lists"

    for uid in ${!uid2user[@]} ; do
        user=${uid2user[$uid]}
        while read line ; do

            case $OUTPUTFMT in
                dnsmasq )
                    printf 'txt-record=%s.%s,"%s"\n' ${user}.grplist $HESDOMAIN "$line"
                    ;;
                unbound )
                    printf $'local-data:\t\'%s.%s\tTXT\t"%s"\'\n' ${user}.grplist ${HESDOMAIN}${dot} "$line"
                    ;;
                bind )
                    printf $'%s\tIN\tTXT\t"%s"\n' ${user}.grplist "$line"
                    ;;
            esac

        done < <(echo ${grplists[$user]} | $sanitize)
    done

    echo


    # and finally filsys records
    if (( FILSYS )) ; then
        echo "${COMMENT} Filesystems"

        for uid in ${!uid2user[@]} ; do
            user=${uid2user[$uid]}
            while read line ; do
                # skip empty lines due to trailing carriage returns
                (( ${#line} )) || continue

                case $OUTPUTFMT in
                    dnsmasq )
                        printf 'txt-record=%s.%s,"%s"\n' ${user}.filsys $HESDOMAIN "$line"
                        ;;
                    unbound )
                        printf $'local-data:\t\'%s.%s\tTXT\t"%s"\'\n' ${user}.filsys ${HESDOMAIN}${dot} "$line"
                        ;;
                    bind )
                        printf $'%s\tIN\tTXT\t"%s"\n' ${user}.filsys "$line"
                        ;;
                esac

            done < <(echo "${filsys[$user]}" | $sanitize)

        done
    fi


    # Restore stdout and close descriptor 9
    exec 1>&9 9>&-
}

